<?php
/**
 * @file
 * A module that inserts into the pantry all products of a list.
 */

/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function buy_list_help($path, $arg) {
  switch ($path) {
    case "admin/help#buy_list":
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("The Buy List module inserts into the user pantry all products os a given list") . '</p>';
      return $output;
  }
}

/**
* Implements hook_menu().
*/
function buy_list_menu() {
  $items = array();
  $items['admin/config/content/buy_list'] = array(
    'title' => t('Configuration of Buy List'),
    'description' => t('Configure the Buy List module'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('buy_list_admin'),
    'access arguments' => array('administer Buy List settings'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
* Implements hook_permission().
*/
function buy_list_permission() {
  return array(
    'administer Buy List settings' => array(
      'title' => t('Administer Buy List configurations'),
      'restrict access' => true,
    )
  );
}

/**
* Implements hook_admin().
* 
* Configuration form
*/
function buy_list_admin() {
  $form = array();
 
  //Something to configure
  $form['buy_list_something'] = array(
    '#type' => 'textfield',
    '#title' => t('Something'),
    '#default_value' => variable_get('buy_list_something', ""),
    '#size' => 60,
    '#maxlength' => 250,
    '#description' => t("Something"),
    '#required' => TRUE,
  );
 
  return system_settings_form($form);
}


function buy_list_extract_products($node) {
  if ($node->type == 'lista') {
    $id_list = $node->nid['0']['value'];
    $id_list_products = db_fetch_array(db_query("SELECT field_productos_compra_value FROM {drupalis_field_data_field_productos_compra} WHERE entity_id = %d", $id_list));
    $products=array();
    foreach($id_list_products as $key => $id_product){}
      $query = db_fetch_array(db_query("SELECT field_nombre_producto_compra_value FROM {drupalis_field_data_field_nombre_producto_compra} WHERE entity_id = %d", $id_product));
      $nombre = $query[field_nombre_producto_compra_value];
      $query = db_fetch_array(db_query("SELECT field_cantidad_producto_compra_value FROM {drupalis_field_data_field_cantidad_producto_compra} WHERE entity_id = %d", $id_product));
      $cantidad = $query[field_cantidad_producto_compra_value];
      $query = db_fetch_array(db_query("SELECT field_unidades_producto_compra_tid FROM {drupalis_field_data_field_unidades_producto_compra} WHERE entity_id = %d", $id_product));
      $unidad = $query[field_unidades_producto_compra_tid];
      $query = db_fetch_array(db_query("SELECT field_categoria_producto_compra_tid FROM {drupalis_field_data_field_categoria_producto_compra} WHERE entity_id = %d", $id_product));
      $categoria = $query[field_categoria_producto_compra_tid];
      $products[$key] = array[nombre" => $nombre,
							  "cantidad" => $cantidad,
							  "unidad" => $unidad,
							  "categoria" => $categoria,
							  ],
  }
  return $products;
}

function buy_list_insert_products($node) {
  $products = buy_list_extract_products($node);
  $uid = $node->uid['0']['value'];
  foreach($products as $p){
	$nombre = $p[nombre];
	$cantidad = $p[cantidad];
	$unidad = $p[unidad];
	$categoria = $p[categoria];
	INSERT INTO drupalis_node VALUES (sig_id, sig_id, producto_despensa, es, $nombre, $uid, 1, fecha_creacion, fecha_cambio, 1, 1, 0, 0, 0); 
  }
}

function buy_list_make_item(array(tnombre,tcantidad,ttipo_cant,tcategoria)) {

	$producto_despensa = new stdClass(); /*Se crea el objeto*/

	$producto_despensa->title = tnombre;
	$producto_despensa->field_cantidad_2 = tcantidad;
	$producto_despensa->field_cantidad = ttipo_cant;
	$producto_despensa->field_categor_a = tcategoria; /*Se da valor a los campos*/


	return $producto_despensa; /*Se devuelve el objeto*/
}
